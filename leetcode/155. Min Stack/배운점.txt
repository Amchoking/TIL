155. Min Stack

Problem:
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
Implement the MinStack class:
- MinStack() initializes the stack object.
- void push(int val) pushes the element val onto the stack.
- void pop() removes the element on the top of the stack.
- int top() gets the top element of the stack.
- int getMin() retrieves the minimum element in the stack.

문제:
push, pop, top, 요소의 최솟값을 상수시간으로 수행할 수 있는 스택을 디자인하라.
minstack class 구현
- MinStack()은 스택 오브젝트 초기화
- void push(int val)는 스택에 요소값을 넣는다.
- void pop()은 스택의 맨 위의 값을 제거한다.
- int top()은 스택의 맨 위의 값을 출력한다.
- int getMin()은 현재까지 스택의 최소값을 검색한다.

배운점, 해결방법:
이 문제에서 getMin()함수를 상수시간안에 해결하는 것이 주된 문제이다.
보통 최소값을 찾을 때에는 최소 log(n)의 시간이 필요하므로 고민을 해보았는데, push를 하면서 스택의 요소들을 정리할 수 있는게 핵심 요소였다.
최소값을 저장하는 스택을 만들어 현재까지의 최소값 요소들을 저장하는 공간을 만든다.
예를 들어 [3,2,1,2,3]이라는 값을 스택에 push하게 되면, 최소값 스택에는 [3,2,1,1,1]라는 값이 들어가게 된다.
pop을 할 때마다 두 스택에서 pop을 해주면, 값이 빠지면서 현재까지의 최소값 결과들도 변화하게 된다.
따라서 상수값으로 최소요소를 출력할 수 있게 되는것이다.
공간활용을 더 알뜰하게 하려면, 최소값 스택에 마지막 저장값보다 더 작거나 같은 경우만 저장해 나가고, pop을 할 때, pop한 값이 최소값과 같은 경우에만 최소값 스택도 pop을 해준다.
이렇게 하면 최소값 스택은 더 적은 저장공간을 활용하게 될 것이다.