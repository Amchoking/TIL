45. Jump Game II

Problems:
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.
You can assume that you can always reach the last index.

문제:
음이아닌 정수들로 이루어진 배열이 주어진다. 너의 처음 위치는 배열의 첫 인덱스 위치이다.
배열의 각각의 요소들은 너의 자리에서 이동할 수 있는 최대 점프 길이를 나타낸다.
너의 목표는 마지막 인덱스의 최소의 점프로 이동하는것이다.
너는 마지막 인덱스에 갈 수 있다고 추측해도 좋다.

배운점, 해결방법:
처음에는 다이나믹 프로그램과 큐를 이용한 방법을 생각했다. 처음 위치를 큐에 넣고, 각각의 위치에 따른 이동횟수를 저장하는 배열을 만들어 최대치로 고정시킨다.
큐에서 꺼낸 값을 n이라고 할때(큐에는 인덱스 값을 저장), n+1번부터 n+num[n]까지 현재 이동횟수+1 값보다 큰값이 이동횟수를 저장하는 배열에 들어있다면,
이동횟수+1값이 새로운 최소 이동횟수가 되므로 초기화 시켜준다. 이후 큐에 초기화된 위치의 인덱스를 넣는다. 이것을 마지막 인덱스까지 반복하여 답을 구한다.
하지만 이 방법을 사용하면 서로 비교하는 불필요한 계산이 많아져 nums[i]의 최댓값 * nums배열의 길이 만큼의 시간복잡도가 걸린다.
그래서 더 빠르게 해결할 방법을 찾던중 그리디 알고리즘을 이용하여 해결하는 방법을 찾았다.
우선 처음부터 마지막 인덱스까지 반복하는데, 여기서는 jump번의 횟수로 이동할 수 있는 최대거리를 저장해 준다.
만약 2번만에 10번째 위치까지 도달할 수 있다면, 2번만에 1~9번중 어디든지 이동할 수 있다는 것을 이용해야 한다.
따라서 현재 i번째 인덱스에 위치하고, 이것이 x번 점프로 도달할수있는 최대거리라면 ~i+nums[~i]들중 최댓값이 x+1번으로 도달할 수 있는 최대거리가 된다.
따라서 이 최대거리가 마지막 인덱스 값을 따라잡는 때가 마지막에 도달할 수 있는 최소 횟수가 된다.(발판이 하나인 경우는 예외처리)
이렇게 되면 시간복잡도 O(n)으로 문제를 해결할 수 있게된다.